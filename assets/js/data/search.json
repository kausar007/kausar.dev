[ { "title": "How to check SHA-256 checksum of files", "url": "/posts/how-to-check-sha256-checksum-of-files/", "categories": "security", "tags": "windows, sha256, checksum, security, mac, linux, openssl", "date": "2023-01-05 12:35:00 +0000", "snippet": "A lot of websites provide pre-computed SHA-256 digests for files that users download. A user can compare the checksum of the file they have downloaded with the checksum provided by the website sepa...", "content": "A lot of websites provide pre-computed SHA-256 digests for files that users download. A user can compare the checksum of the file they have downloaded with the checksum provided by the website separately. If the checksums match, it means the file was not tampered with in transit and it is indeed the file the user intended to download. No one wants to download and run an infected executable file that has malicious code.So how would we check SHA-256 checksum of a file?Most unix-based operating systems include SHA-2 utilities in their distribution packages and Windows users also use PowerShell function “Get-FileHash” to compute SHA-256 checksums.Let’s look at some of these commands and examples of using them. For the examples below let’s assume we want to use KeePass to store our passwords and we have downloaded version 2.52 of the software that comes in the zip file called KeePass-2.52.zip from KeePass website. Now this is kind of software we can’t take our chances with, so we must check the integrity of the file. We should compare the checksum of the file we have downloaded with the one provided by KeePass i.e. 2793D799 F1BB5745 F18739D2 BF162D24 73D006C3 E3DF2A4E 28FBCC1A 0439D6C0 on their integrity page and make sure they are the same.LinuxOn a Linux machine we can use sha256sum.[kausar@debian ~]$ sha256sum KeePass-2.52.zip2793d799f1bb5745f18739d2bf162d2473d006c3e3df2a4e28fbcc1a0439d6c0 KeePass-2.52.zipWe can see the value above matches the one on KeePass integrity page so we know we have the trustworthy file and it has not been tampered with. Sometimes it can be hard to check each character by looking at them especially when we have multiple files. Some websites give us the checksum in a DIGEST file so we can verify them easily and automatically. DIGEST file is a text file containing names of files and their respective checksums. Assuming we have a DIGEST file called KeePass-2.52.zip.DIGEST in the same directory as the zip file then we can verify the file using:[kausar@debian ~]$ sha256sum -c KeePass-2.52.zip.DIGESTKeePass-2.52.zip: OK-c or --check option reads the checksums and filenames in the DIGEST file. It then computes the checksums of the files and compares them checksums in the digest file. If they match it prints OK and if they don’t match it will show which files failed.MacOSOn MacOS we can use the following command to compute the SHA-256 checksum for the file.[kausar@mac ~]$ shasum -a 256 KeePass-2.52.zip2793d799f1bb5745f18739d2bf162d2473d006c3e3df2a4e28fbcc1a0439d6c0 KeePass-2.52.zip-a or --algorithm option is used to specify which version of Secure Hash Algorithms (SHA) we want to use.We can also use shasum to verify using DIGEST files.[kausar@mac ~]$ shasum -c KeePass-2.52.zip.DIGESTKeePass-2.52.zip: OKOpenSSLRegardless of which operating system we use if we have openssl installed then it can also be used to compute SHA-256 checksums.[kausar@mac ~]$ openssl sha256 KeePass-2.52.zipSHA256(KeePass-2.52.zip)= 2793d799f1bb5745f18739d2bf162d2473d006c3e3df2a4e28fbcc1a0439d6c0WindowsOn Windows we can either use certUtil or PowerShell function Get-FileHash to compute SHA-256 checksum for the file.In command prompt and powershell we can do:C:\\Users\\Kausar&gt;certUtil -hashfile KeePass-2.52.zip SHA256SHA256 hash of KeePass-2.52.zip:2793d799f1bb5745f18739d2bf162d2473d006c3e3df2a4e28fbcc1a0439d6c0CertUtil: -hashfile command completed successfully.In PowerShell we can use the following to compute SHA-256:PS C:\\Users\\Kausar&gt; Get-FileHash .\\KeePass-2.52.zip –Algorithm SHA256Algorithm Hash Path--------- ---- ----SHA256 2793d799f1bb5745f18739d2bf162d2473d006c3e3df2a4e28fbcc1a0439d6c0 C:\\Users\\Kausar\\KeePass-2.52.zip" }, { "title": "How to check MD5 checksum of files", "url": "/posts/how-to-check-md5-checksum-of-files/", "categories": "security", "tags": "windows, md5, checksum, security, mac, linux, openssl", "date": "2017-04-11 09:35:00 +0100", "snippet": "First of all please do not use MD5 for cryptographic purposes such as storing one-way hash of passwords like it was used in the past. It has severe vulnerabilities and the CMU Software Engineering ...", "content": "First of all please do not use MD5 for cryptographic purposes such as storing one-way hash of passwords like it was used in the past. It has severe vulnerabilities and the CMU Software Engineering Institute has concluded that MD5 is essentially “cryptographically broken and unsuitable for further use”.However it’s still widely used as a checksum to verify data integrity against corruption. Even for this purpose it’s slowly being replaced by stronger algorithms like SHA-2. To learn how to compute SHA-256 checksum of files click here.Although a lot of websites still provide pre-computed MD5 digests for files that users download. A user can compare the checksum of the file they have downloaded with the checksum provided by the website separately. If the checksums match, it means the file was not tampered with in transit and it is indeed the file the user intended to download. No one wants to download and run an infected executable file that has malicious code.So how would we check MD5 checksum of a file?Most unix-based operating systems include MD5 utilities in their distribution packages and Windows users can use PowerShell function “Get-FileHash” to compute MD5 checksums.Let’s look at some of these commands and examples of using them. For the examples below let’s assume we want to use KeePass to store our passwords and we have downloaded version 2.52 of the software that comes in the zip file called KeePass-2.52.zip from KeePass website. Now this is kind of software we can’t take our chances with, so we must check the integrity of the file. We should compare the checksum of the file we have downloaded with the one provided by KeePass i.e. 5F0F4D70 2FBC9967 E8063E23 1F561363 on their integrity page and make sure they are the same.LinuxOn a Linux machine we can use md5sum.[kausar@debian ~]$ md5sum KeePass-2.52.zip5f0f4d702fbc9967e8063e231f561363 KeePass-2.52.zipWe can see the value above matches the one on KeePass integrity page so we know we have the trustworthy file and it has not been tampered with. Sometimes it can be hard to check each character by looking at them especially when we have multiple files. Some websites give us the checksum in a DIGEST file so we can verify them easily and automatically. DIGEST file is a text file containing names of files and their respective checksums. Assuming we have a DIGEST file called KeePass-2.52.zip.DIGEST in the same directory as the zip file then we can verify the file using:[kausar@debian ~]$ md5sum -c KeePass-2.52.zip.DIGESTKeePass-2.52.zip: OK-c or --check option reads the checksums and filenames in the DIGEST file. It then computes the checksums of the files and compares them checksums in the digest file. If they match it prints OK and if they don’t match it will show which files failed.MacOSOn MacOS we can use the following command to compute the MD5 checksum for the file.[kausar@mac ~]$ md5 KeePass-2.52.zipMD5 (KeePass-2.52.zip) = 5f0f4d702fbc9967e8063e231f561363If we need to use the command in a script where we need to save the output to a variable then we can use the -q flag which is for quiet. With this flag it only shows the MD5 hash without any other information.[kausar@mac ~]$ md5 -q KeePass-2.52.zip5f0f4d702fbc9967e8063e231f561363OpenSSLRegardless of which operating system we use if we have openssl installed then it can also be used to compute MD5 checksums.[kausar@mac ~]$ openssl md5 KeePass-2.52.zipMD5(KeePass-2.52.zip)= 5f0f4d702fbc9967e8063e231f561363WindowsOn Windows we can either use certUtil or PowerShell function Get-FileHash to compute MD5 checksum for the file.In command prompt and PowerShell we can do:C:\\Users\\Kausar&gt;certUtil -hashfile KeePass-2.52.zip MD5MD5 hash of KeePass-2.52.zip:5f0f4d702fbc9967e8063e231f561363CertUtil: -hashfile command completed successfully.In PowerShell we can use the following to compute MD5:PS C:\\Users\\Kausar&gt; Get-FileHash .\\KeePass-2.52.zip –Algorithm MD5Algorithm Hash Path--------- ---- ----MD5 5F0F4D702FBC9967E8063E231F561363 C:\\Users\\Kausar\\KeePass-2.52.zipOutdated The information below is outdated and kept only for archival purposes. Use the Windows methods above.On Windows we can use a free third-party software called WinMD5Free to compute checksums. It is available to download from WinMD5.com. It is a portable software and doesn’t need to be installed in order to use it. Once downloaded, extract the zip file and run WinMD5Free.exe.Browse and select the file you want to compute MD5 checksum for. WinMD5Free will compute the MD5 hash and display it.We can also use WinMD5 to verify the checksums automatically same as we did on Linux using md5sum -c. In order to do this all we have to do is copy the checksum from website into textbox titled “Original file MD5 checksum value” and click on Verify." }, { "title": "Cannot run Jekyll build as non-root user", "url": "/posts/cannot-run-jekyll-as-non-root-user/", "categories": "jekyll", "tags": "error, jekyll, permissions", "date": "2016-07-06 02:05:00 +0100", "snippet": "If you accidently run Jekyll build or serve as root user and now want to run it as any other user and get an error message like:[kausar@centos ~]$ jekyll buildConfiguration file: _config.yml ...", "content": "If you accidently run Jekyll build or serve as root user and now want to run it as any other user and get an error message like:[kausar@centos ~]$ jekyll buildConfiguration file: _config.yml Source: &lt;omitted&gt; Destination: &lt;omitted&gt; Incremental build: disabled. Enable with --incremental Generating...jekyll 3.1.6 | Error: Permission denied - _siteThis is because it generated the destination directory (_site in my case) when it was running as root user. Hence root now owns that directory and cannot be changed by other users. Changing the owner using the following command should resolve the issue.# assuming destination directory is called _sitesudo chown -R $(whoami):$(whoami) _siteBash will run $(whoami) first replacing it with your username. Then the sudo chown will run and change the owner of the directory.Now just clean Jekyll and try again:# Remove jekyll metadata file.jekyll clean" }, { "title": "Android Naming Scheme", "url": "/posts/android-naming-scheme/", "categories": "android", "tags": "android, naming conventions", "date": "2016-07-06 00:48:00 +0100", "snippet": "I really like Android’s confectionary-themed naming scheme. It’s really sweet (pun intended 😉). And it also goes in alphabetical order. I guess the question is what happens when they reach Z. Firs...", "content": "I really like Android’s confectionary-themed naming scheme. It’s really sweet (pun intended 😉). And it also goes in alphabetical order. I guess the question is what happens when they reach Z. First version not named. (A) Second version also not named. (B) Cupcake Donut Eclair Froyo Gingerbread Honeycomb Ice Cream Sandwich Jelly Bean KitKat Lollipop Marshmallow Nougat Oreo PieUpdate 2019:Ok so they did that for 10 years between 2009 and 2019 and have now ended this naming scheme. Future Android versions will use numerical order like Android 10, Android 11 and so on." }, { "title": "Fix for error: no acceptable C compiler found in $PATH", "url": "/posts/fix-for-no-acceptable-c-compiler-found/", "categories": "installation", "tags": "ruby, centos, error, gem, make", "date": "2016-07-05 02:51:00 +0100", "snippet": "While installing Jekyll on a new CentOS machine I got this this error.configure: error: in `/usr/lib/ruby/gems/1.8/gems/ffi-1.9.10/ext/ffi_c/libffi-x86_64-linux':configure: error: no acceptable C c...", "content": "While installing Jekyll on a new CentOS machine I got this this error.configure: error: in `/usr/lib/ruby/gems/1.8/gems/ffi-1.9.10/ext/ffi_c/libffi-x86_64-linux':configure: error: no acceptable C compiler found in $PATHSee `config.log' for more detailsmake: *** [\"/usr/lib/ruby/gems/1.8/gems/ffi-1.9.10/ext/ffi_c/libffi-x86_64-linux\"/.libs/libffi_convenience.a] Error 1This usually happends when Ruby wants to build a gem (usually first one) from source and it requires a C compiler. This can also happen when you try to compile a piece of software from source and that software is written in C. Usually you will have some sort of Makefile and will ask you to run make install etc. This is when the error can occur.To fix this all you need is to install a C compiler. GNU Compiler Collection includes compiler for C. The package can be installed using the following command on a CentOS machine utilising yum.sudo yum install gcc" }, { "title": "Fix for ERROR: Failed to build gem native extension", "url": "/posts/fix-for-failed-to-build-gem-native-extension/", "categories": "ruby", "tags": "ruby, centos, error, gem, gcc, yum, packages", "date": "2016-07-05 02:16:00 +0100", "snippet": "I came across this error when I was installing Jekyll on a CentOS machine. If you are installing a Ruby gem (usually first one on new machine) and you get an error like:[kausar@centos ~]$ sudo gem ...", "content": "I came across this error when I was installing Jekyll on a CentOS machine. If you are installing a Ruby gem (usually first one on new machine) and you get an error like:[kausar@centos ~]$ sudo gem install jekyllBuilding native extensions. This could take a while...ERROR: Error installing jekyll: ERROR: Failed to build gem native extension./usr/bin/ruby extconf.rbmkmf.rb can't find header files for ruby at /usr/lib/ruby/ruby.hThis is usually because Ruby wants to build a gem from source but can’t find Ruby development package on the machine. Installing the package ruby-devel will fix this issue. The following command shows how to install it on a Centos machine using yum.sudo yum install ruby-devel" } ]
